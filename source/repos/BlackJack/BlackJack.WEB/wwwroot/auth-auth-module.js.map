{"version":3,"sources":["webpack:///./src/app/auth/auth-routing.module.ts","webpack:///./src/app/auth/auth.component.html","webpack:///./src/app/auth/auth.component.scss","webpack:///./src/app/auth/auth.component.ts","webpack:///./src/app/auth/auth.module.ts","webpack:///./src/app/auth/pages/login-page/login-page.component.html","webpack:///./src/app/auth/pages/login-page/login-page.component.ts","webpack:///./src/app/auth/pages/registration-page/registration-page.component.html","webpack:///./src/app/auth/pages/registration-page/registration-page.component.ts","webpack:///./src/app/shared/helpers/must-match.helper.ts","webpack:///./src/app/shared/helpers/year-range.helper.ts"],"names":[],"mappings":"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","file":"auth-auth-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginAuthComponent } from './pages/login-page/login-page.component';\nimport { RegistrationAuthComponent } from './pages/registration-page/registration-page.component';\nimport { AuthComponent } from './auth.component';\n\nconst routes: Routes = [ \n  { path: '', component: AuthComponent, \n  children:[{ \n    path: 'login', component: LoginAuthComponent },\n  { path: 'register', component: RegistrationAuthComponent }]},\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-md-6\\\">\\n  <router-outlet></router-outlet>\\n  </div>\\n</div>\\n\"","module.exports = \"div {\\n  margin-bottom: 1%; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXV0aC9DOlxcVXNlcnNcXEFudWl0ZXgtODRcXGdpdFxcV2ViXFxzb3VyY2VcXHJlcG9zXFxCbGFja0phY2tcXEJsYWNrSmFjay5XRUJcXENsaWVudEFwcC9zcmNcXGFwcFxcYXV0aFxcYXV0aC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGlCQUFpQixFQUFBIiwiZmlsZSI6InNyYy9hcHAvYXV0aC9hdXRoLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiZGl2e1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMSU7IFxyXG59Il19 */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.scss']\n})\nexport class AuthComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { LoginAuthComponent } from './pages/login-page/login-page.component';\nimport { RegistrationAuthComponent } from './pages/registration-page/registration-page.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { AuthComponent } from './auth.component';\n\n@NgModule({\n  declarations: [LoginAuthComponent, RegistrationAuthComponent, AuthComponent],\n  imports: [\n    CommonModule,\n    AuthRoutingModule,\n    SharedModule\n  ]\n})\nexport class AuthModule { }\n","module.exports = \"<form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"login()\\\">\\n  <div class=\\\"formGroup\\\">\\n    <label for=\\\"email\\\">Email</label>\\n    <input type=\\\"text\\\" name=\\\"email\\\" class=\\\"form-control\\\" placeholder=\\\"Email\\\" formControlName=\\\"email\\\">\\n  </div>\\n  <div\\n    *ngIf=\\\"hasErrors(['email'])\\\"\\n    class=\\\"alert alert-danger\\\">\\n    <div *ngIf=\\\"loginForm.get(['email']).errors.required\\\">\\n      Email is required.\\n    </div>\\n    <div *ngIf=\\\"loginForm.get(['email']).errors.email\\\">\\n      Email not validate\\n    </div>\\n  </div>\\n  <div class=\\\"loginForm\\\">\\n    <label for=\\\"password\\\">Password</label>\\n    <input type=\\\"password\\\" class=\\\"form-control\\\" name=\\\"password\\\" placeholder=\\\"Password\\\"\\n      formControlName=\\\"password\\\">\\n  </div>\\n  <div\\n    *ngIf=\\\"hasErrors(['password'])\\\"\\n    class=\\\"alert alert-danger\\\">\\n    <div *ngIf=\\\"loginForm.get(['password']).errors.required\\\">\\n      Password is required.\\n    </div>\\n    <div *ngIf=\\\"loginForm.get(['password']).errors.minlength\\\">\\n      Password minLength 6\\n    </div>\\n    <div *ngIf=\\\"loginForm.get(['password']).errors.pattern\\\">\\n      Password not validate\\n    </div>\\n  </div>\\n  <div class=\\\"loginForm\\\">\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" [disabled]=\\\"loginForm.invalid\\\">Login</button>\\n  </div>\\n</form>\"","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { UserService } from 'src/app/shared/services/user.service';\nimport { Router } from '@angular/router';\nimport { takeUntil,timeInterval} from 'rxjs/operators';\nimport { LoginAccountView } from 'src/app/shared/entities/auth/login-account.view';\n@Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['../../auth.component.scss']\n})\nexport class LoginAuthComponent implements OnInit, OnDestroy {\n  private loginForm: FormGroup;\n  private componetDestroyed: Subject<boolean> = new Subject<boolean>();\n\n  constructor(private readonly userService: UserService, private readonly formBuilder: FormBuilder,private readonly router: Router) {\n  }\n  ngOnInit(){\n    this.initForms();\n  }\n  private initForms():void{\n    this.loginForm = this.formBuilder.group({\n      'email': ['', [Validators.required, Validators.email]],\n      'password': ['', [Validators.required, Validators.minLength(6), Validators.pattern(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).*$/)]],\n    });\n  }\n  private hasErrors(name:string): boolean {\n    return this.loginForm.get(name).invalid && (this.loginForm.get(name).dirty || this.loginForm.get(name).touched);\n  }\n  private login(): void {\n    let loginAccount: LoginAccountView = {\n      email: this.loginForm.controls['email'].value,\n      password: this.loginForm.controls['password'].value \n    };\n    if (this.loginForm.invalid) {\n      return;\n    }\n    this.userService.login(loginAccount)\n     .pipe(takeUntil(this.componetDestroyed))\n     .subscribe(x=> {\n      if (x) {\n        this.router.navigate([\"/game/home\"]);\n      }\n    });\n  }\n  ngOnDestroy() {\n    this.componetDestroyed.next(true);\n  }\n}","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-md-6\\\">\\n    <h2>Please enter your information</h2>\\n  </div>\\n</div>\\n<form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"registration()\\\">\\n  <div class=\\\"formGroup\\\">\\n    <label for=\\\"email\\\">Email</label>\\n    <input type=\\\"text\\\" name=\\\"email\\\" class=\\\"form-control\\\" placeholder=\\\"Email\\\" formControlName=\\\"email\\\">\\n  </div>\\n  <div\\n    *ngIf=\\\"hasErrors(['email'])\\\"\\n    class=\\\"alert alert-danger\\\">\\n    <div *ngIf=\\\"registerForm.controls['email'].errors.required\\\">\\n      Email is required.\\n    </div>\\n    <div *ngIf=\\\"registerForm.controls['email'].errors.email\\\">\\n      Email not validate\\n    </div>\\n  </div>\\n  <div class=\\\"formGroup\\\">\\n    <label for=\\\"nmae\\\">Name</label>\\n    <input type=\\\"text\\\" name=\\\"name\\\" class=\\\"form-control\\\" placeholder=\\\"Name\\\" formControlName=\\\"name\\\">\\n  </div>\\n  <div\\n    *ngIf=\\\"hasErrors(['name'])\\\"\\n    class=\\\"alert alert-danger\\\">\\n    <div *ngIf=\\\"registerForm.controls['name'].errors.required\\\">\\n      Name is required.\\n    </div>\\n    <div *ngIf=\\\"registerForm.controls['name'].errors.maxlength\\\">\\n      Name max Length 15\\n    </div>\\n  </div>\\n  <div class=\\\"formGroup\\\">\\n    <label for=\\\"year\\\">Year</label>\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"year\\\" placeholder=\\\"Year\\\" formControlName=\\\"year\\\">\\n  </div>\\n  <div\\n   *ngIf=\\\"hasErrors(['year'])\\\"\\n    class=\\\"alert alert-danger\\\">\\n    <div *ngIf=\\\"registerForm.controls['year'].errors.required\\\">\\n      year is required.\\n    </div>\\n    <div *ngIf=\\\"registerForm.controls['year'].errors.minlength\\\">\\n      year min min Length 4\\n    </div>\\n    <div *ngIf=\\\"registerForm.controls['year'].errors.maxlength\\\">\\n      year min max Length 4\\n    </div>\\n    <div *ngIf=\\\"registerForm.controls['year'].errors.pattern\\\">\\n      ONLY NUMB ERROR\\n    </div>\\n    <div *ngIf=\\\"registerForm.controls['year'].errors.ageRange\\\">\\n      Year range from 1920 to 2019\\n    </div>\\n    <div *ngIf=\\\"registerForm.controls['year'].errors.adultRange\\\">\\n      You don`t adult enough\\n    </div>\\n\\n  </div>\\n  <div class=\\\"formGroup\\\">\\n    <label for=\\\"password\\\">Password</label>\\n    <input type=\\\"password\\\" class=\\\"form-control\\\" name=\\\"password\\\" placeholder=\\\"Password\\\"\\n      formControlName=\\\"password\\\">\\n  </div>\\n  <div\\n  *ngIf=\\\"hasErrors(['password'])\\\"\\n    class=\\\"alert alert-danger\\\">\\n    <div *ngIf=\\\"registerForm.controls['password'].errors.required\\\">\\n      Password is required.\\n    </div>\\n    <div *ngIf=\\\"registerForm.controls['password'].errors.minlength\\\">\\n      Password minLength 6\\n    </div>\\n    <div *ngIf=\\\"registerForm.controls['password'].errors.pattern\\\">\\n      Password not validate\\n    </div>\\n  </div>\\n\\n  <div class=\\\"formGroup\\\">\\n    <label for=\\\"confirmPassword\\\">Confirm password</label>\\n    <input type=\\\"password\\\" class=\\\"form-control\\\" name=\\\"confirmPassword\\\" placeholder=\\\"Confirm password\\\"\\n      formControlName=\\\"confirmPassword\\\">\\n  </div>\\n  <div\\n  *ngIf=\\\"hasErrors(['confirmPassword'])\\\"\\n    class=\\\"alert alert-danger\\\">\\n    <div *ngIf=\\\"registerForm.controls['confirmPassword'].errors.required\\\">\\n      Password is required.\\n    </div>\\n    <div *ngIf=\\\"registerForm.controls['confirmPassword'].errors.minlength\\\">\\n      Password min Length 6\\n    </div>\\n    <div *ngIf=\\\"registerForm.controls['confirmPassword'].errors.pattern\\\">\\n      Password not validate\\n    </div>\\n    <div *ngIf=\\\"registerForm.controls['confirmPassword'].errors.mustMatch\\\">\\n      Passwords must match\\n    </div>\\n  </div>\\n  <div class=\\\"formGroup\\\">\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" [disabled]=\\\"registerForm.invalid\\\">Register</button>\\n  </div>\\n</form>\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { UserService } from 'src/app/shared/services/user.service';\nimport { Router } from '@angular/router';\nimport { MustMatch } from 'src/app/shared/helpers/must-match.helper';\nimport { YearRange } from 'src/app/shared/helpers/year-range.helper';\nimport { GetAllAccountView } from 'src/app/shared/entities/auth/get-all-account.view';\nimport { RegisterAccountView } from 'src/app/shared/entities/auth/register-account.view';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ToastrMessagesService } from 'src/app/shared/services/toastr-messages.service';\n\n@Component({\n  selector: 'app-registration-page',\n  templateUrl: './registration-page.component.html',\n  styleUrls: ['../../auth.component.scss']\n})\nexport class RegistrationAuthComponent implements OnInit {\n  private registerForm: FormGroup;\n  private getAllAccounts: GetAllAccountView;\n  private componetDestroyed: Subject<boolean> = new Subject<boolean>();\n  \n  constructor(private readonly userService: UserService, private readonly router: Router, private readonly formBuilder: FormBuilder,\n    private readonly toastrService: ToastrMessagesService) {\n  }\n  ngOnInit() {\n    this.initForms();\n    this.userService.registerUsers()\n    .pipe(takeUntil(this.componetDestroyed))\n    .subscribe(x => {\n      this.getAllAccounts = x;\n    });\n  }\n  private initForms(): void{\n    this.registerForm = this.formBuilder.group({\n      'email': ['', [Validators.required,Validators.email]],\n      'name': ['', [Validators.required,Validators.maxLength(15)]],\n      'year': ['', [Validators.required,Validators.minLength(4),YearRange, Validators.maxLength(4), Validators.pattern(/^-?(0|[1-9]\\d*)?$/)]],\n      'password': ['', [Validators.required,Validators.minLength(6), Validators.pattern(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).*$/)]],\n      'confirmPassword': ['', [Validators.required,Validators.minLength(6), Validators.pattern(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).*$/)]],\n    }, {\n        validator: MustMatch('password', 'confirmPassword')\n      });\n  }\n  private hasErrors(name:string): boolean {\n    return this.registerForm.get(name).invalid && (this.registerForm.get(name).dirty || this.registerForm.get(name).touched);\n  }\n  private registration():void {\n    let registerAccount: RegisterAccountView = {\n      email:this.registerForm.value['email'],\n      name:this.registerForm.value['name'],\n      year:this.registerForm.value['year'],\n      password:this.registerForm.value['password'],\n      confirmPassword:this.registerForm.value['confirmPassword'],\n    };\n    let duplicateUser = this.getAllAccounts.users\n    .filter(x => { \n      return x.email === registerAccount.email; \n    })\n    .length;\n    if (duplicateUser) {\n      let errorMessage = { message: 'Username \"' + registerAccount.email + '\" is already taken' };\n      this.toastrService.warning(errorMessage.message);\n    }\n    if (this.registerForm.invalid) {\n      return;\n    }\n    this.userService.register(registerAccount)\n      .pipe(takeUntil(this.componetDestroyed))\n      .subscribe(x => {\n        if (x) {\n          this.toastrService.success('All set! Email '+registerAccount.email +' is successfully register.');\n          this.router.navigate(['/auth/login']);\n        }\n      })\n  }\n  ngOnDestroy() {\n    this.componetDestroyed.next(true);\n  }\n}\n\n","import { FormGroup } from '@angular/forms';\r\n\r\nexport function MustMatch(controlName: string, matchingControlName: string) {\r\n    return (formGroup: FormGroup) => {\r\n        const control = formGroup.controls[controlName];\r\n        const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n        if (matchingControl.errors && !matchingControl.errors.mustMatch) {\r\n            return;\r\n        }\r\n        if (control.value !== matchingControl.value) {\r\n            matchingControl.setErrors({ mustMatch: true });\r\n        } else {\r\n            matchingControl.setErrors(null);\r\n        }\r\n    }\r\n}","import { AbstractControl } from '@angular/forms';\r\n\r\nexport function YearRange(control: AbstractControl): { [key: string]: boolean } | null {\r\n    let maxYear = 2019;\r\n    let minYear = 1920;\r\n    if (control.value > maxYear || control.value < minYear) {\r\n        return { 'ageRange': true };\r\n    } if (maxYear - control.value < 18) {\r\n        return { 'adultRange': true };\r\n    }\r\n    return null;\r\n}\r\n\r\n"],"sourceRoot":""}