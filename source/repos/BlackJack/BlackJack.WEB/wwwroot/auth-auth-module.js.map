{"version":3,"sources":["webpack:///./src/app/auth/auth-routing.module.ts","webpack:///./src/app/auth/auth.component.html","webpack:///./src/app/auth/auth.component.scss","webpack:///./src/app/auth/auth.component.ts","webpack:///./src/app/auth/auth.module.ts","webpack:///./src/app/auth/pages/login-page/login-page.component.html","webpack:///./src/app/auth/pages/login-page/login-page.component.ts","webpack:///./src/app/auth/pages/registration-page/registration-page.component.html","webpack:///./src/app/auth/pages/registration-page/registration-page.component.ts","webpack:///./src/app/shared/helpers/must-match.helper.ts","webpack:///./src/app/shared/helpers/year-range.helper.ts"],"names":[],"mappings":"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","file":"auth-auth-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginAuthComponent } from './pages/login-page/login-page.component';\nimport { RegistrationAuthComponent } from './pages/registration-page/registration-page.component';\nimport { AuthComponent } from './auth.component';\n\nconst routes: Routes = [ \n  { path: '', component: AuthComponent, \n  children:[{ \n    path: 'login', component: LoginAuthComponent },\n  { path: 'register', component: RegistrationAuthComponent }]},\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-md-6\\\">\\n  <router-outlet></router-outlet>\\n  </div>\\n</div>\\n\"","module.exports = \"div {\\n  margin-bottom: 1%; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXV0aC9DOlxcVXNlcnNcXEFudWl0ZXgtODRcXGdpdFxcV2ViXFxzb3VyY2VcXHJlcG9zXFxCbGFja0phY2tcXEJsYWNrSmFjay5XRUJcXENsaWVudEFwcC9zcmNcXGFwcFxcYXV0aFxcYXV0aC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGlCQUFpQixFQUFBIiwiZmlsZSI6InNyYy9hcHAvYXV0aC9hdXRoLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiZGl2e1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMSU7IFxyXG59Il19 */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.scss']\n})\nexport class AuthComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { LoginAuthComponent } from './pages/login-page/login-page.component';\nimport { RegistrationAuthComponent } from './pages/registration-page/registration-page.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { AuthComponent } from './auth.component';\n\n@NgModule({\n  declarations: [LoginAuthComponent, RegistrationAuthComponent, AuthComponent],\n  imports: [\n    CommonModule,\n    AuthRoutingModule,\n    SharedModule\n  ]\n})\nexport class AuthModule { }\n","module.exports = \"<form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"login()\\\">\\n  <div class=\\\"formGroup\\\">\\n    <label for=\\\"email\\\">Email</label>\\n    <input type=\\\"text\\\" name=\\\"email\\\" class=\\\"form-control\\\" placeholder=\\\"Email\\\" formControlName=\\\"email\\\">\\n  </div>\\n  <div\\n    *ngIf=\\\"getErrors(['email'])\\\"\\n    class=\\\"alert alert-danger\\\">\\n    <div *ngIf=\\\"getControl(['email']).errors.required\\\">\\n      Email is required.\\n    </div>\\n    <div *ngIf=\\\"getControl(['email']).errors.email\\\">\\n      Email not validate\\n    </div>\\n  </div>\\n  <div class=\\\"loginForm\\\">\\n    <label for=\\\"password\\\">Password</label>\\n    <input type=\\\"password\\\" class=\\\"form-control\\\" name=\\\"password\\\" placeholder=\\\"Password\\\"\\n      formControlName=\\\"password\\\">\\n  </div>\\n  <div\\n    *ngIf=\\\"getErrors(['password'])\\\"\\n    class=\\\"alert alert-danger\\\">\\n    <div *ngIf=\\\"getControl(['password']).errors.required\\\">\\n      Password is required.\\n    </div>\\n    <div *ngIf=\\\"getControl(['password']).errors.minlength\\\">\\n      Password minLength 6\\n    </div>\\n    <div *ngIf=\\\"getControl(['password']).errors.pattern\\\">\\n      Password not validate\\n    </div>\\n  </div>\\n  <div class=\\\"loginForm\\\">\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" [disabled]=\\\"loginForm.invalid\\\">Login</button>\\n  </div>\\n</form>\"","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, AbstractControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { UserService } from 'src/app/shared/services/user.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['../../auth.component.scss']\n})\nexport class LoginAuthComponent implements OnInit, OnDestroy {\n  private loginForm: FormGroup;\n  private subscription: Subscription;\n  private brandNew: boolean;\n\n  constructor(private readonly userService: UserService,\n    private readonly activatedRoute: ActivatedRoute, private readonly formBuilder: FormBuilder, private readonly toastr: ToastrService) {\n    this.subscription = this.activatedRoute.queryParams.subscribe(\n      (param: any) => {\n        this.brandNew = param['brandNew'];\n        if (this.brandNew) {\n          this.toastr.success('All set! Please login with your account')\n        }\n      });\n  }\n  ngOnInit():void {\n    this.loginForm = this.formBuilder.group({\n      'email': ['', [Validators.required, Validators.email]],\n      'password': ['', [Validators.required, Validators.minLength(6), Validators.pattern(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).*$/)]],\n    });\n  }\n  private getControl(name:string): AbstractControl {\n    return this.loginForm.get(name);\n  }\n  private getErrors(name:string): boolean {\n    return this.getControl(name).invalid && (this.getControl(name).dirty || this.getControl(name).touched);\n  }\n  private login(): void {\n    if (this.loginForm.invalid) {\n      return;\n    }\n    this.userService.login(this.loginForm.value);\n  }\n  ngOnDestroy():void {\n    this.subscription.unsubscribe();\n  }\n}","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-md-6\\\">\\n    <h2>Please enter your information</h2>\\n  </div>\\n</div>\\n<form [formGroup]=\\\"formGroup\\\" (ngSubmit)=\\\"registration(formGroup.value)\\\">\\n  <div class=\\\"formGroup\\\">\\n    <label for=\\\"email\\\">Email</label>\\n    <input type=\\\"text\\\" required name=\\\"email\\\" class=\\\"form-control\\\" placeholder=\\\"Email\\\" formControlName=\\\"email\\\">\\n  </div>\\n  <div\\n    *ngIf=\\\"formGroup.controls['email'].invalid && (formGroup.controls['email'].dirty || formGroup.controls['email'].touched)\\\"\\n    class=\\\"alert alert-danger\\\">\\n    <div *ngIf=\\\"formGroup.controls['email'].errors.required\\\">\\n      Email is required.\\n    </div>\\n    <div *ngIf=\\\"formGroup.controls['email'].errors.email\\\">\\n      Email not validate\\n    </div>\\n  </div>\\n  <div class=\\\"formGroup\\\">\\n    <label for=\\\"nmae\\\">Name</label>\\n    <input type=\\\"text\\\" required name=\\\"name\\\" class=\\\"form-control\\\" placeholder=\\\"Name\\\" formControlName=\\\"name\\\">\\n  </div>\\n  <div\\n    *ngIf=\\\"formGroup.controls['name'].invalid && (formGroup.controls['name'].dirty || formGroup.controls['name'].touched)\\\"\\n    class=\\\"alert alert-danger\\\">\\n    <div *ngIf=\\\"formGroup.controls['name'].errors.required\\\">\\n      Name is required.\\n    </div>\\n    <div *ngIf=\\\"formGroup.controls['name'].errors.maxlength\\\">\\n      Name max Length 15\\n    </div>\\n  </div>\\n  <div class=\\\"formGroup\\\">\\n    <label for=\\\"year\\\">Year</label>\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" required name=\\\"year\\\" placeholder=\\\"Year\\\" formControlName=\\\"year\\\">\\n  </div>\\n  <div\\n    *ngIf=\\\"formGroup.controls['year'].invalid && (formGroup.controls['year'].dirty || formGroup.controls['year'].touched)\\\"\\n    class=\\\"alert alert-danger\\\">\\n    <div *ngIf=\\\"formGroup.controls['year'].errors.required\\\">\\n      year is required.\\n    </div>\\n    <div *ngIf=\\\"formGroup.controls['year'].errors.minlength\\\">\\n      year min min Length 4\\n    </div>\\n    <div *ngIf=\\\"formGroup.controls['year'].errors.maxlength\\\">\\n      year min max Length 4\\n    </div>\\n    <div *ngIf=\\\"formGroup.controls['year'].errors.pattern\\\">\\n      ONLY NUMB ERROR\\n    </div>\\n    <div *ngIf=\\\"formGroup.controls['year'].errors.ageRange\\\">\\n      Year range from 1920 to 2019\\n    </div>\\n    <div *ngIf=\\\"formGroup.controls['year'].errors.adultRange\\\">\\n      You don`t adult enough\\n    </div>\\n\\n  </div>\\n  <div class=\\\"formGroup\\\">\\n    <label for=\\\"password\\\">Password</label>\\n    <input type=\\\"password\\\" required class=\\\"form-control\\\" name=\\\"password\\\" placeholder=\\\"Password\\\"\\n      formControlName=\\\"password\\\">\\n  </div>\\n  <div\\n    *ngIf=\\\"formGroup.controls['password'].invalid && (formGroup.controls['password'].dirty || formGroup.controls['password'].touched)\\\"\\n    class=\\\"alert alert-danger\\\">\\n    <div *ngIf=\\\"formGroup.controls['password'].errors.required\\\">\\n      Password is required.\\n    </div>\\n    <div *ngIf=\\\"formGroup.controls['password'].errors.minlength\\\">\\n      Password minLength 6\\n    </div>\\n    <div *ngIf=\\\"formGroup.controls['password'].errors.pattern\\\">\\n      Password not validate\\n    </div>\\n  </div>\\n\\n  <div class=\\\"formGroup\\\">\\n    <label for=\\\"confirmPassword\\\">Confirm password</label>\\n    <input type=\\\"password\\\" required class=\\\"form-control\\\" name=\\\"confirmPassword\\\" placeholder=\\\"Confirm password\\\"\\n      formControlName=\\\"confirmPassword\\\">\\n  </div>\\n  <div\\n    *ngIf=\\\"formGroup.controls['confirmPassword'].invalid && (formGroup.controls['confirmPassword'].dirty || formGroup.controls['confirmPassword'].touched)\\\"\\n    class=\\\"alert alert-danger\\\">\\n    <div *ngIf=\\\"formGroup.controls['confirmPassword'].errors.required\\\">\\n      Password is required.\\n    </div>\\n    <div *ngIf=\\\"formGroup.controls['confirmPassword'].errors.minlength\\\">\\n      Password min Length 6\\n    </div>\\n    <div *ngIf=\\\"formGroup.controls['confirmPassword'].errors.pattern\\\">\\n      Password not validate\\n    </div>\\n    <div *ngIf=\\\"formGroup.controls['confirmPassword'].errors.mustMatch\\\">\\n      Passwords must match\\n    </div>\\n  </div>\\n  <div class=\\\"formGroup\\\">\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" [disabled]=\\\"formGroup.invalid\\\">Register</button>\\n  </div>\\n</form>\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { UserService } from 'src/app/shared/services/user.service';\nimport { Router } from '@angular/router';\nimport { MustMatch } from 'src/app/shared/helpers/must-match.helper';\nimport { YearRange } from 'src/app/shared/helpers/year-range.helper';\nimport { UserGetAllAccountViewItem } from 'src/app/shared/entities/auth/get-all-account.view';\nimport { RegisterAccountView } from 'src/app/shared/entities/auth/register-account.view';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-registration-page',\n  templateUrl: './registration-page.component.html',\n  styleUrls: ['../../auth.component.scss']\n})\nexport class RegistrationAuthComponent implements OnInit {\n\n  error: string;\n  isRequesting: boolean;\n  submitted: boolean = false;\n  public registerForm: RegisterAccountView;\n  formGroup: FormGroup;\n  public userGetAllAccounts: UserGetAllAccountViewItem[];\n  public registerAccount: RegisterAccountView;\n\n  constructor(private userService: UserService, private router: Router, private _formBuilder: FormBuilder,private readonly toastr: ToastrService) {\n    this.formGroup = _formBuilder.group({\n      'email': ['', Validators.email],\n      'name': ['', Validators.maxLength(15)],\n      'year': ['', [Validators.minLength(4),YearRange, Validators.maxLength(4), Validators.pattern(/^-?(0|[1-9]\\d*)?$/)]],\n      'password': ['', [Validators.minLength(6), Validators.pattern(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).*$/)]],\n      'confirmPassword': ['', [Validators.minLength(6), Validators.pattern(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).*$/)]],\n    }, {\n        validator: MustMatch('password', 'confirmPassword')\n      });\n  }\n\n  ngOnInit() {\n    this.registerForm =\n      {\n        email: '',\n        name:'',\n        year: 0,\n        password: '',\n        confirmPassword: '',\n      }\n    this.userService.registerUsers().subscribe(x => {\n      this.userGetAllAccounts = x['users'];\n    }, error => error);\n\n  }\n\n  registration() {\n    this.submitted = true;\n    this.isRequesting = true;\n    this.registerAccount = Object.assign(this.registerForm, this.formGroup.value)\n    let newUser = this.registerAccount.email;\n    let duplicateUser = this.userGetAllAccounts.filter(x => { return x.email === newUser; }).length;\n    if (this.formGroup.invalid) {\n      return;\n    }\n    if (duplicateUser) {\n      let errorMessage = { message: 'Username \"' + newUser + '\" is already taken' };\n      return this.toastr.error( errorMessage.message);\n    }\n    this.userService.register(this.registerAccount)\n      .subscribe(x => {\n        if (x) {\n          this.router.navigate(['/auth/login'], { queryParams: { brandNew: true, email: this.registerAccount.email } });\n        }\n      },\n        err => {\n          this.error = err.error;\n        }\n\n      )\n  }\n}\n\n","import { FormGroup } from '@angular/forms';\r\n\r\nexport function MustMatch(controlName: string, matchingControlName: string) {\r\n    return (formGroup: FormGroup) => {\r\n        const control = formGroup.controls[controlName];\r\n        const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n        if (matchingControl.errors && !matchingControl.errors.mustMatch) {\r\n            return;\r\n        }\r\n        if (control.value !== matchingControl.value) {\r\n            matchingControl.setErrors({ mustMatch: true });\r\n        } else {\r\n            matchingControl.setErrors(null);\r\n        }\r\n    }\r\n}","import { AbstractControl } from '@angular/forms';\r\n\r\nexport function YearRange(control: AbstractControl): { [key: string]: boolean } | null {\r\n    let maxYear = 2019;\r\n    let minYear = 1920;\r\n    if (control.value > maxYear || control.value < minYear) {\r\n        return { 'ageRange': true };\r\n    } if (maxYear - control.value < 18) {\r\n        return { 'adultRange': true };\r\n    }\r\n    return null;\r\n}\r\n\r\n"],"sourceRoot":""}